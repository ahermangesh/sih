"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("_app-pages-browser_src_components_ChatPanel_tsx",{

/***/ "(app-pages-browser)/./src/hooks/useSpeech.ts":
/*!********************************!*\
  !*** ./src/hooks/useSpeech.ts ***!
  \********************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useSpeech: function() { return /* binding */ useSpeech; }\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* __next_internal_client_entry_do_not_use__ useSpeech auto */ \nfunction useSpeech() {\n    const [isListening, setIsListening] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);\n    const [transcript, setTranscript] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(\"\");\n    const [isSpeaking, setIsSpeaking] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);\n    const recognitionRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n    const speechSynthesisRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n    // Check browser support\n    const speechSupported =  true && (\"SpeechRecognition\" in window || \"webkitSpeechRecognition\" in window);\n    const ttsSupported =  true && \"speechSynthesis\" in window;\n    // Initialize speech recognition\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        if (!speechSupported) return;\n        const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;\n        const recognition = new SpeechRecognition();\n        recognition.continuous = true;\n        recognition.interimResults = true;\n        recognition.lang = \"en-US\";\n        recognition.onstart = ()=>{\n            setIsListening(true);\n        };\n        recognition.onresult = (event)=>{\n            let finalTranscript = \"\";\n            let interimTranscript = \"\";\n            for(let i = event.resultIndex; i < event.results.length; i++){\n                const result = event.results[i];\n                if (result.isFinal) {\n                    finalTranscript += result[0].transcript;\n                } else {\n                    interimTranscript += result[0].transcript;\n                }\n            }\n            setTranscript(finalTranscript + interimTranscript);\n        };\n        recognition.onend = ()=>{\n            setIsListening(false);\n        };\n        recognition.onerror = (event)=>{\n            console.error(\"Speech recognition error:\", event.error);\n            setIsListening(false);\n        };\n        recognitionRef.current = recognition;\n        return ()=>{\n            if (recognitionRef.current) {\n                recognitionRef.current.abort();\n            }\n        };\n    }, [\n        speechSupported\n    ]);\n    const startListening = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(()=>{\n        if (!speechSupported || !recognitionRef.current || isListening) return;\n        setTranscript(\"\");\n        recognitionRef.current.start();\n    }, [\n        speechSupported,\n        isListening\n    ]);\n    const stopListening = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(()=>{\n        if (!recognitionRef.current || !isListening) return;\n        recognitionRef.current.stop();\n    }, [\n        isListening\n    ]);\n    const resetTranscript = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(()=>{\n        setTranscript(\"\");\n    }, []);\n    // Helper function to clean markdown from text\n    const cleanTextForSpeech = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((text)=>{\n        return text// Remove markdown headers\n        .replace(/#{1,6}\\s+/g, \"\")// Remove bold markers\n        .replace(/\\*\\*(.*?)\\*\\*/g, \"$1\")// Remove italic markers\n        .replace(/\\*(.*?)\\*/g, \"$1\")// Remove bullet points\n        .replace(/^\\s*[\\*\\-\\+]\\s+/gm, \"\")// Remove numbered lists\n        .replace(/^\\s*\\d+\\.\\s+/gm, \"\")// Remove code markers\n        .replace(/`([^`]+)`/g, \"$1\")// Remove blockquote markers\n        .replace(/^\\s*>\\s+/gm, \"\")// Clean up multiple spaces and newlines\n        .replace(/\\n\\s*\\n/g, \". \").replace(/\\s+/g, \" \")// Add natural pauses after sections\n        .replace(/\\.\\s+([A-Z])/g, \"... $1\").trim();\n    }, []);\n    // Helper function to get the best male voice\n    const getBestVoice = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(()=>{\n        if (!ttsSupported) return null;\n        const voices = window.speechSynthesis.getVoices();\n        // Priority order for male voices\n        const preferredVoices = [\n            \"Microsoft David - English (United States)\",\n            \"Google US English Male\",\n            \"Alex\",\n            \"Daniel\",\n            \"Thomas\",\n            \"Microsoft Mark - English (United States)\"\n        ];\n        // First try to find a preferred male voice\n        for (const voiceName of preferredVoices){\n            const voice = voices.find((v)=>v.name.includes(voiceName.split(\" - \")[0]));\n            if (voice) return voice;\n        }\n        // Fallback: find any male voice\n        const maleVoice = voices.find((v)=>v.name.toLowerCase().includes(\"male\") || v.name.toLowerCase().includes(\"david\") || v.name.toLowerCase().includes(\"daniel\") || v.name.toLowerCase().includes(\"alex\") || v.name.toLowerCase().includes(\"mark\"));\n        if (maleVoice) return maleVoice;\n        // Final fallback: default voice\n        return voices.find((v)=>v.default) || voices[0] || null;\n    }, [\n        ttsSupported\n    ]);\n    const speak = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((text)=>{\n        if (!ttsSupported || !text.trim()) return;\n        // Stop any ongoing speech\n        window.speechSynthesis.cancel();\n        // Clean the text for natural speech\n        const cleanText = cleanTextForSpeech(text);\n        const utterance = new SpeechSynthesisUtterance(cleanText);\n        // Set conversational voice parameters\n        utterance.rate = 0.85 // Slightly slower for clarity\n        ;\n        utterance.pitch = 0.9 // Slightly lower pitch for male voice\n        ;\n        utterance.volume = 0.9;\n        // Try to use a good male voice\n        const voice = getBestVoice();\n        if (voice) {\n            utterance.voice = voice;\n        }\n        utterance.onstart = ()=>{\n            setIsSpeaking(true);\n        };\n        utterance.onend = ()=>{\n            setIsSpeaking(false);\n        };\n        utterance.onerror = ()=>{\n            setIsSpeaking(false);\n        };\n        speechSynthesisRef.current = utterance;\n        window.speechSynthesis.speak(utterance);\n    }, [\n        ttsSupported\n    ]);\n    const stopSpeaking = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(()=>{\n        if (!ttsSupported) return;\n        window.speechSynthesis.cancel();\n        setIsSpeaking(false);\n    }, [\n        ttsSupported\n    ]);\n    return {\n        // Speech Recognition\n        isListening,\n        transcript,\n        startListening,\n        stopListening,\n        resetTranscript,\n        // Text-to-Speech\n        isSpeaking,\n        speak,\n        stopSpeaking,\n        // Support detection\n        speechSupported,\n        ttsSupported\n    };\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/hooks/useSpeech.ts\n"));

/***/ })

});