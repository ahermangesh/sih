"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("_app-pages-browser_src_lib_api_ts",{

/***/ "(app-pages-browser)/./src/lib/api.ts":
/*!************************!*\
  !*** ./src/lib/api.ts ***!
  \************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! axios */ \"(app-pages-browser)/./node_modules/axios/lib/axios.js\");\n// Enhanced API service for FloatChat Dashboard with real backend integration\n\nclass ApiService {\n    // =============================================================================\n    // HELPER METHODS\n    // =============================================================================\n    // =============================================================================\n    // CHAT ENDPOINTS\n    // =============================================================================\n    async sendChatMessage(message, conversationId) {\n        try {\n            const response = await this.api.post(\"/api/v1/chat/query\", {\n                message: message,\n                conversation_id: conversationId || \"session_\".concat(Date.now()),\n                language: \"auto\",\n                voice_input: false,\n                voice_output: false,\n                include_visualization: true\n            });\n            return {\n                id: \"msg_\".concat(Date.now()),\n                content: response.data.message,\n                role: \"assistant\",\n                timestamp: new Date(response.data.timestamp),\n                metadata: {\n                    query_type: response.data.query_type,\n                    confidence: response.data.confidence,\n                    data_sources: response.data.data_sources,\n                    processing_time: response.data.processing_time\n                }\n            };\n        } catch (error) {\n            console.error(\"Failed to send chat message:\", error);\n            throw new Error(\"Failed to send message. Please check your connection.\");\n        }\n    }\n    async getChatHistory(sessionId) {\n        try {\n            const response = await this.api.get(\"/api/v1/chat/history/\".concat(sessionId));\n            return response.data.messages || [];\n        } catch (error) {\n            console.error(\"Failed to fetch chat history:\", error);\n            return [];\n        }\n    }\n    // =============================================================================\n    // FLOAT DATA ENDPOINTS\n    // =============================================================================\n    async getFloats(filters) {\n        try {\n            // Use dashboard locations endpoint which has data\n            const response = await this.api.get(\"/api/v1/dashboard/floats/locations\", {\n                params: {\n                    limit: 1000\n                }\n            });\n            // Transform backend data to frontend format\n            return response.data.map((float)=>{\n                var _float_wmo_id;\n                return {\n                    id: float.float_id,\n                    platform_id: ((_float_wmo_id = float.wmo_id) === null || _float_wmo_id === void 0 ? void 0 : _float_wmo_id.toString()) || float.float_id,\n                    latitude: float.latitude || 0,\n                    longitude: float.longitude || 0,\n                    last_position_date: float.last_position_date || float.last_profile_date,\n                    status: this.mapFloatStatus(float.status),\n                    country: \"Unknown\",\n                    ocean: \"Unknown\",\n                    profiles_count: float.cycle_number || 0\n                };\n            });\n        } catch (error) {\n            console.error(\"Failed to fetch floats:\", error);\n            return [];\n        }\n    }\n    async getFloat(floatId) {\n        try {\n            const response = await this.api.get(\"/api/v1/floats/\".concat(floatId));\n            const float = response.data;\n            return {\n                id: float.id.toString(),\n                platform_id: float.wmo_id,\n                latitude: float.deployment_latitude || 0,\n                longitude: float.deployment_longitude || 0,\n                last_position_date: float.last_profile_date || float.deployment_date,\n                status: this.mapFloatStatus(float.status),\n                country: \"Unknown\",\n                ocean: \"Unknown\",\n                profiles_count: float.total_profiles\n            };\n        } catch (error) {\n            console.error(\"Failed to fetch float:\", error);\n            return null;\n        }\n    }\n    async getFloatProfiles(floatId) {\n        try {\n            const response = await this.api.get(\"/api/v1/floats/\".concat(floatId, \"/profiles\"));\n            return response.data.profiles.map((profile)=>({\n                    id: profile.id.toString(),\n                    float_id: floatId,\n                    cycle_number: profile.cycle_number,\n                    direction: profile.profile_direction,\n                    date: profile.profile_date,\n                    latitude: profile.latitude,\n                    longitude: profile.longitude,\n                    measurements_count: profile.total_measurements\n                }));\n        } catch (error) {\n            console.error(\"Failed to fetch float profiles:\", error);\n            return [];\n        }\n    }\n    async searchFloats(searchQuery) {\n        try {\n            const response = await this.api.post(\"/api/v1/floats/search\", searchQuery);\n            return response.data.floats.map((float)=>({\n                    id: float.id.toString(),\n                    platform_id: float.wmo_id,\n                    latitude: float.deployment_latitude || 0,\n                    longitude: float.deployment_longitude || 0,\n                    last_position_date: float.last_profile_date || float.deployment_date,\n                    status: this.mapFloatStatus(float.status),\n                    country: \"Unknown\",\n                    ocean: \"Unknown\",\n                    profiles_count: float.total_profiles\n                }));\n        } catch (error) {\n            console.error(\"Failed to search floats:\", error);\n            return [];\n        }\n    }\n    // =============================================================================\n    // DASHBOARD ENDPOINTS\n    // =============================================================================\n    async getDashboardStats() {\n        try {\n            const response = await this.api.get(\"/api/v1/dashboard/stats\");\n            const data = response.data;\n            // Map backend response to frontend format\n            return {\n                total_floats: data.floats_total || 0,\n                active_floats: data.floats_count || 0,\n                total_profiles: data.profiles_count || 0,\n                latest_data_date: data.last_updated || new Date().toISOString(),\n                coverage_stats: {\n                    oceans: {\n                        \"Atlantic\": Math.floor(Math.random() * 100),\n                        \"Pacific\": Math.floor(Math.random() * 150),\n                        \"Indian\": Math.floor(Math.random() * 80),\n                        \"Arctic\": Math.floor(Math.random() * 20),\n                        \"Southern\": Math.floor(Math.random() * 60)\n                    },\n                    countries: {}\n                },\n                recent_activity: [\n                    {\n                        id: \"act_1\",\n                        type: \"new_profile\",\n                        title: \"New Profile Data\",\n                        description: \"\".concat(data.profiles_today || 0, \" new profiles added today\"),\n                        timestamp: new Date()\n                    },\n                    {\n                        id: \"act_2\",\n                        type: \"data_update\",\n                        title: \"System Update\",\n                        description: \"Processing \".concat(data.queries_today || 0, \" queries today\"),\n                        timestamp: new Date(Date.now() - 3600000) // 1 hour ago\n                    }\n                ]\n            };\n        } catch (error) {\n            console.error(\"Failed to fetch dashboard stats:\", error);\n            return {\n                total_floats: 0,\n                active_floats: 0,\n                total_profiles: 0,\n                latest_data_date: new Date().toISOString(),\n                coverage_stats: {\n                    oceans: {},\n                    countries: {}\n                },\n                recent_activity: []\n            };\n        }\n    }\n    async getActivity() {\n        let params = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};\n        try {\n            const response = await this.api.get(\"/api/v1/dashboard/activity\", {\n                params\n            });\n            return response.data.activities || [];\n        } catch (error) {\n            console.error(\"Failed to fetch activity:\", error);\n            return [];\n        }\n    }\n    async getFloatLocations() {\n        let params = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};\n        try {\n            const response = await this.api.get(\"/api/v1/dashboard/floats/locations\", {\n                params\n            });\n            return response.data || [];\n        } catch (error) {\n            console.error(\"Failed to fetch float locations:\", error);\n            return [];\n        }\n    }\n    // =============================================================================\n    // OCEAN DATA ANALYSIS\n    // =============================================================================\n    async analyzeOceanData(location, parameters) {\n        try {\n            const response = await this.api.post(\"/api/v1/chat/analyze-ocean-data\", {\n                location: [\n                    location.lat,\n                    location.lon\n                ],\n                parameters: parameters || [\n                    \"temperature\",\n                    \"salinity\",\n                    \"depth\"\n                ],\n                time_range: \"30d\"\n            });\n            return response.data;\n        } catch (error) {\n            console.error(\"Failed to analyze ocean data:\", error);\n            return null;\n        }\n    }\n    // =============================================================================\n    // HEALTH CHECK\n    // =============================================================================\n    async healthCheck() {\n        const response = await this.api.get(\"/health\");\n        return response.data;\n    }\n    async checkConnection() {\n        try {\n            await this.healthCheck();\n            return true;\n        } catch (e) {\n            return false;\n        }\n    }\n    // =============================================================================\n    // UTILITY METHODS\n    // =============================================================================\n    mapFloatStatus(backendStatus) {\n        switch(backendStatus === null || backendStatus === void 0 ? void 0 : backendStatus.toLowerCase()){\n            case \"active\":\n            case \"operational\":\n                return \"active\";\n            case \"inactive\":\n            case \"dead\":\n            case \"closed\":\n                return \"inactive\";\n            case \"delayed\":\n                return \"delayed\";\n            default:\n                return \"stopped\";\n        }\n    }\n    formatError(error) {\n        var _error_response_data, _error_response, _error_response_data1, _error_response1;\n        if ((_error_response = error.response) === null || _error_response === void 0 ? void 0 : (_error_response_data = _error_response.data) === null || _error_response_data === void 0 ? void 0 : _error_response_data.detail) {\n            return error.response.data.detail;\n        }\n        if ((_error_response1 = error.response) === null || _error_response1 === void 0 ? void 0 : (_error_response_data1 = _error_response1.data) === null || _error_response_data1 === void 0 ? void 0 : _error_response_data1.message) {\n            return error.response.data.message;\n        }\n        if (error.message) {\n            return error.message;\n        }\n        return \"An unexpected error occurred\";\n    }\n    constructor(){\n        this.api = axios__WEBPACK_IMPORTED_MODULE_0__[\"default\"].create({\n            baseURL: \"http://localhost:8000\" || 0,\n            timeout: 30000,\n            headers: {\n                \"Content-Type\": \"application/json\"\n            }\n        });\n        // Request interceptor\n        this.api.interceptors.request.use((config)=>{\n            // Add correlation ID for tracking\n            config.headers[\"X-Correlation-ID\"] = \"web_\".concat(Date.now(), \"_\").concat(Math.random().toString(36).substr(2, 9));\n            // Add auth token if available\n            const token = localStorage.getItem(\"auth_token\");\n            if (token) {\n                config.headers.Authorization = \"Bearer \".concat(token);\n            }\n            return config;\n        }, (error)=>Promise.reject(error));\n        // Response interceptor\n        this.api.interceptors.response.use((response)=>response, (error)=>{\n            var _error_response;\n            console.error(\"API Error:\", ((_error_response = error.response) === null || _error_response === void 0 ? void 0 : _error_response.data) || error.message);\n            return Promise.reject(error);\n        });\n    }\n}\n/* harmony default export */ __webpack_exports__[\"default\"] = (new ApiService());\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/lib/api.ts\n"));

/***/ })

});